// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Whenever you update your Prisma schema, you will have to update your database schema using either
// prisma migrate dev  or prisma db push

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String?
  googleId  String?
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  readingList ReadingList[]
  wishList    WishList[]
  reviews     Reviews[]
  followedBy  Follows[]  @relation("following")
  following   Follows[] @relation("follower")
 }

model Follows {
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id])
  followingId Int

  @@id([followerId, followingId])
}


model Books {
  id              Int      @id @default(autoincrement())
  title           String
  isbn            String
  pageCount       Int
  publishedDate   DateTime
  thumbnailUrl    String?
  shortDescription String?
  longDescription String?
  status          String
  authors         String[]
  categories      String[]
  readingList     ReadingList[]
  wishList        WishList[]
  reviews         Reviews[]
}

model ReadingList {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  user      User     @relation(fields: [userId], references: [id])
  book      Books    @relation(fields: [bookId], references: [id])
}

model WishList {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  user      User     @relation(fields: [userId], references: [id])
  book      Books    @relation(fields: [bookId], references: [id])
}

model Reviews {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  user      User     @relation(fields: [userId], references: [id])
  book      Books    @relation(fields: [bookId], references: [id])
  rating    Int
  review    String
}
